<?xml version="1.0" encoding="utf-8" ?>
<Project ToolsVersion="14.0" xmlns="http://schemas.microsoft.com/developer/msbuild/2003">
  <Import Project="deploy.targets" />
  <UsingTask AssemblyFile="$(MSBuildThisFileDirectory)\..\..\tools\VersionInfo.exe" TaskName="VVVV.Tools.MSBuild.GetVersionInfo" />
  <UsingTask AssemblyFile="$(MSBuildThisFileDirectory)\..\..\tools\VersionInfo.exe" TaskName="VVVV.Tools.MSBuild.GetPlatformFromBinary" />

  <!-- VVVV_VersionInfo -->
  <Target Name="VVVV_VersionInfo">
    <GetVersionInfo File="$(VVVVExe)">
      <!-- 38.2-4322 preview -->
      <Output TaskParameter="NewVersionString" PropertyName="VVVV_VersionInfo" />
      <!-- 50alpha38.2 -->
      <Output TaskParameter="OldVersionString" PropertyName="VVVV_VersionInfo_Old" />
      <Output TaskParameter="IsPreview" PropertyName="VVVV_IsPreview" />
    </GetVersionInfo>
    <GetPlatformFromBinary File="$(VVVVExe)">
      <!-- x64 -->
      <Output TaskParameter="ReturnValue" PropertyName="VVVV_Platform" />
    </GetPlatformFromBinary>
    
    <PropertyGroup>
      <!-- beta -->
      <VVVV_Environment>beta</VVVV_Environment>
      <!-- 38.2-4322_preview -->
      <VVVV_Version_OnDisk>$(VVVV_VersionInfo.Replace(' ', '_'))</VVVV_Version_OnDisk>
      <!-- 38.2-4322 preview x64 -->
      <VVVV_VersionAndPlatform>$(VVVV_VersionInfo) $(VVVV_Platform)</VVVV_VersionAndPlatform>
      <!-- 38.2-4322_preview_x64 -->
      <VVVV_VersionAndPlatform_OnDisk>$(VVVV_VersionAndPlatform.Replace(' ', '_'))</VVVV_VersionAndPlatform_OnDisk>
    </PropertyGroup>

    <PropertyGroup>
      <!-- vvvv beta -->
      <VVVV_AppName>vvvv beta</VVVV_AppName>
      <!-- vvvv beta 38.2 preview -->
      <VVVV_AppNameWithVersion>$(VVVV_AppName) $(VVVV_VersionInfo) $(VVVV_Platform)</VVVV_AppNameWithVersion>
      <!-- vvvv_beta_38.2-4322_preview_x64 -->
      <VVVV_NameVersionPlatform_OnDisk>vvvv_beta_$(VVVV_VersionAndPlatform_OnDisk)</VVVV_NameVersionPlatform_OnDisk>
      <!-- addons_38.2-4322_preview_x64 -->
      <Addons_NameVersionPlatform_OnDisk>addons_$(VVVV_VersionAndPlatform_OnDisk)</Addons_NameVersionPlatform_OnDisk>
    </PropertyGroup>
  
    <PropertyGroup Condition="$(VVVV_IsPreview)">
      <!-- beta-preview -->
      <VVVV_Environment>beta-preview</VVVV_Environment>
      <!-- vvvv beta -->
      <VVVV_AppName>vvvv beta preview</VVVV_AppName>
    </PropertyGroup>
  </Target>

  <!-- Generates all the filenames used by the Build, Deploy and Zip tasks -->
  <Target Name="VVVV_GenerateFileNames" DependsOnTargets="VVVV_VersionInfo">
    <PropertyGroup>
      <CoreDir>$(RootDir)lib\core\</CoreDir>
      <CommonDir>$(RootDir)..\common\</CommonDir>
      <PluginsDir>$(RootDir)lib\nodes\plugins\</PluginsDir>
      <EditorsDir>$(RootDir)lib\nodes\editors\</EditorsDir>
      <!-- vvvv_beta-preview_38.2_x64 -->
      <DeployName>$(DeployPrefix)_$(VVVV_VersionAndPlatform_OnDisk)</DeployName>
      <DeployDir Condition="'$(DeployDir)' == ''">$(DeployBaseDir)$(DeployName)\</DeployDir>
      <DeployedVVVVExe>$(DeployDir)vvvv.exe</DeployedVVVVExe>
      <ZipFileName>$(DeployBaseDir)$(DeployName).zip</ZipFileName>
    </PropertyGroup>
  </Target>

  <!-- Build -->
  <Target Name="VVVV_Build" DependsOnTargets="VVVV_GenerateFileNames" AfterTargets="Build">
    <PropertyGroup>
      <_ExeConfigFile>$(OutputPath)vvvv45.exe.config</_ExeConfigFile>
    </PropertyGroup>
    <!-- Copy shared dependencies to lib/core -->
    <ItemGroup>
      <_SharedDependencies_ Include="$(PluginsDir)Sanford*" />
      <_SharedDependencies_ Include="$(CommonDir)src\thirdparty\*" />
    </ItemGroup>
    <Copy SourceFiles="@(_SharedDependencies_)" DestinationFolder="$(CoreDir)" />
    <!-- Delete all files which are already in lib/core -->
    <CreateItem Include="$(CoreDir)**\*.*">
      <Output TaskParameter="Include" ItemName="CoreFiles" />
    </CreateItem>
    <Delete Files="@(CoreFiles->'$(PluginsDir)%(RecursiveDir)%(Filename)%(Extension)')" />
    <Delete Files="@(CoreFiles->'$(EditorsDir)%(RecursiveDir)%(Filename)%(Extension)')" />
    <!-- Create lib/*.dtd file -->
    <ItemGroup>
      <DTDFiles Include="$(RootDir)lib\*.dtd" />
    </ItemGroup>
    <Delete Files="@(DTDFiles)" />
    <Copy SourceFiles="$(MSBuildThisFileDirectory)vvvv45.dtd" DestinationFiles="$(RootDir)lib\$(VVVV_VersionInfo_Old).dtd" />
    <Copy SourceFiles="$(_ExeConfigFile)" DestinationFiles="$(OutputPath)..\..\vvvv.exe.config" SkipUnchangedFiles="true" Condition="Exists('$(_ExeConfigFile)')" />
    <ItemGroup>
      <DummyFiles Include="$(OutputPath)vvvv45.*" />
    </ItemGroup>
    <Delete Files="@(DummyFiles)" />
  </Target>
  
  <!-- Deploy -->
  <Target Name="VVVV_Deploy" DependsOnTargets="VVVV_GenerateFileNames;VVVV_Build" AfterTargets="Build" Condition=" '$(Configuration)' == 'Deploy' ">
    <PropertyGroup>
      <!-- Signing properties - not to be confused with strong name signing -->
      <VVVVCertFile>..\..\..\vvvv-cert.p12</VVVVCertFile>
      <SignToolTimestampServers>http://timestamp.comodoca.com/authenticode;http://timestamp.verisign.com/scripts/timstamp.dll;http://timestamp.globalsign.com/scripts/timstamp.dll</SignToolTimestampServers>
    </PropertyGroup>
    <!-- Let's not remove the directory since BuildAndInstallVLIntegration installed its packages there. -->
    <!--<RemoveDir Directories="$(DeployDir)" />-->
    <Message Text="Deploying to $(DeployDir)" Importance="High" />
    <!-- Copy files to deploy directory (public/build/vvvv_VERSION) -->
    <CreateItem Include="$(DeployInclude)" Exclude="$(DeployExclude)">
      <Output ItemName="FilesToDeploy" TaskParameter="Include" />
    </CreateItem>
    <Copy SourceFiles="@(FilesToDeploy)"
          DestinationFiles="@(FilesToDeploy->'$(DeployDir)%(RecursiveDir)%(Filename)%(Extension)')" 
          SkipUnchangedFiles="true" 
          OverwriteReadOnlyFiles="true" 
          ContinueOnError="true" />
    
    <!-- Sign the exe -->
    <ItemGroup>
      <_SignExeFiles Include="$(DeployDir)*.exe" />
    </ItemGroup>
    <SignTool SignFiles="@(_SignExeFiles)" 
              PfxFile="$(VVVVCertFile)" 
              TimestampServer="$(SignToolTimestampServers)" 
              Condition=" '$(DeploySignFiles)' == 'true' " />
    
    <!-- Set read-only flags -->
    <CombinePath BasePath="$(DeployDir)" Paths="$(DeployReadOnlyFiles)">
      <Output TaskParameter="CombinedPaths" ItemName="_DeployReadOnlyFiles"/>
    </CombinePath>
    <Exec Command="attrib +R &quot;%(_DeployReadOnlyFiles.Identity)&quot; /S /D" />
    <!-- Set hidden flags -->
    <CombinePath BasePath="$(DeployDir)" Paths="$(DeployHiddenFiles)">
      <Output TaskParameter="CombinedPaths" ItemName="_DeployHiddenFiles" />
    </CombinePath>
    <Exec Command="attrib +H &quot;%(_DeployHiddenFiles.Identity)&quot;" />
  </Target>
  
  <!-- Zip -->
  <Target Name="Zip" DependsOnTargets="VVVV_GenerateFileNames">
    <Message Text="Generating $(ZipFileName)" Importance="High" />
    <Delete Files="$(ZipFileName)" />
    <!-- Because of http://msbuildtasks.tigris.org/issues/show_bug.cgi?id=148 we switched to cmd line call to 7-Zip. -->
    <Exec Command="&quot;$(SevenZip)&quot; a -r &quot;$(ZipFileName)&quot; &quot;$(DeployDir)&quot;" />
    <!--
    <CreateItem Include="$(ZipTempDir)\**\*.*">
      <Output ItemName="ZipFiles" TaskParameter="Include" />
    </CreateItem>
    <Zip Files="@(ZipFiles)" 
         WorkingDirectory="$(TempBaseDir)" 
         ZipFileName="$(ZipFileName)" 
         ZipLevel="9" />
    -->
  </Target>
</Project>
